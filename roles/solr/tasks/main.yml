# file: roles/solr/tasks/main.yml
---
# Pre installation checks
- include_tasks: pre.yml
  
# Ensure group exists
- name: Create the solr group
  become: yes
  become_user: root
  group:
    name: "{{ solr_group }}"
    state: present
    system: yes

# Ensure user exists
- name: Create the solr user
  become: yes
  become_user: root
  user:
    name: "{{ solr_user }}"
    groups: "{{ solr_group }}"
    append: yes

# Don't re-download Solr distribution
- name: Check if Solr is downloaded
  stat:
    path: "{{ tmp_dir }}/solr-{{ solr_version }}.tgz"
  register: solr_downloaded

- name: Download Solr
  get_url:
    url: "{{ solr_download_url }}"
    dest: "{{ tmp_dir }}/solr-{{ solr_version }}.tgz"
  when: solr_downloaded.stat.exists == False

# Extract downloaded file to install dir and create sym-link
- include_tasks: extract.yml

# Create ArkCase Solr configset for Cores
- include_tasks: configset.yml

# Install Solr service
- include_tasks: install-service.yml

- name: Start {{ solr_service_name }}
  shell: "service {{ solr_service_name }} start"
  become: yes
  become_user: root

# Create ArkCase cores
- include_tasks: cores.yml
  when: solr_create_cores == true

# Expose required ports for solr
- include_tasks: firewall.yml
  when: firewall_expose_ports == true

- name: Check Solr {{ solr_version }} PID
  shell: "cat {{ solr_home }}/bin/solr-{{ solr_port }}.pid | awk '{if(NR<2)print}'"
  register: solr_pid
  become: yes
  become_user: root

- name: Check Solr Process {{ solr_pid.stdout }} is running on Port {{ solr_port }}
  shell: "lsof -i :{{ solr_port }} | sed -n '1!p' | awk '{print $2}'"
  register: pid_on_port
  become: yes
  become_user: root

- fail:
    msg: "Solr not running on port {{ solr_port }}"
  when: solr_pid.stdout != pid_on_port.stdout