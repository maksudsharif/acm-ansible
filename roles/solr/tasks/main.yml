# file: roles/solr/tasks/main.yml
---

- name: Ensure dependencies are installed.
  package: name={{ item }} state=present
  become: true
  become_user: root
  with_items:
    - lsof
    - acl
    - sudo

# Ensure Java 1.8+ is present
- name: Ensure Java Installed
  shell: java -version 2>&1 | grep version | awk '{print $3}' | sed 's/"//g'
  register: java_version
- assert: { that: "java_version.stdout | version_compare('1.8', '>=')", msg: "Java must be present before being able to install Solr" }

# Ensure no Solr of the same version exists
- name: Check if the version of Solr already exists
  stat:
    path: "{{ solr_install_dir }}/solr-{{ solr_version }}"
  register: solr_path
- assert: { that: "solr_path.stat.exists == False", msg: "Solr {{ solr_version }} is already installed." }

# Ensure Solr service doesn't exist
- name: Check if Solr {{ solr_version }} service exists
  stat:
    path: "/etc/init.d/{{ solr_service_name }}"
  register: solr_service_path
- assert: { that: "solr_service_path.stat.exists == False", msg: "Solr {{ solr_version }} service is already installed" }

# Ensure group exists
- name: Create the solr group
  become: true
  become_user: root
  group:
    name: "{{ solr_group }}"
    state: present
    system: yes

# Ensure user exists
- name: Create the solr user
  become: true
  become_user: root
  user:
    name: "{{ solr_user }}"
    groups: "{{ solr_group }}"
    append: yes

# Don't re-download Solr distribution
- name: Check if Solr is downloaded
  stat:
    path: "{{ tmp_dir }}/solr-{{ solr_version }}.tgz"
  register: solr_downloaded

- name: Download Solr
  get_url:
    url: "{{ solr_download_url }}"
    dest: "{{ tmp_dir }}/solr-{{ solr_version }}.tgz"
  when: solr_downloaded.stat.exists == False

- name: Create {{ solr_install_dir }} if it doesn't exist
  become: true
  become_user: root
  file:
    path: "{{ solr_install_dir }}"
    state: directory
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
    mode: 0755
    recurse: yes

- name: Extract Solr
  become: true
  become_user: "{{ solr_user }}"
  unarchive:
    src: "{{ tmp_dir }}/solr-{{ solr_version }}.tgz"
    dest: "{{ solr_install_dir }}"
    copy: no
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
    creates: "{{ solr_install_dir }}/solr-{{ solr_version }}"

- name: Create Symlink
  become: true
  become_user: "{{ solr_user }}"
  file:
    src: "{{ solr_install_dir }}/solr-{{ solr_version }}"
    dest: "{{ solr_home }}"
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
    state: link

- name: Copy default configset to create new configset
  become: true
  become_user: "{{ solr_user }}"
  shell: "cp -Rpf {{ solr_home }}/server/solr/configsets/_default {{ solr_home }}/server/solr/configsets/arkcase"

- name: Create ArkCase configset
  become: true
  become_user: "{{ solr_user }}"
  copy:
    src: "{{ item }}"
    dest: "{{ solr_home }}/server/solr/configsets/arkcase/conf"
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
    mode: 0644
  with_items:
    - schema.xml
    - solrconfig.xml

- name: Delete default managed-schema
  become: true
  become_user: "{{ solr_user }}"
  file:
    path: "{{ solr_home }}/server/solr/configsets/arkcase/conf/managed-schema"
    state: absent

- name: Install {{ solr_service_name }} to /etc/init.d
  template:
    src: solr.j2
    dest: "/etc/init.d/{{ solr_service_name }}"
    owner: root
    group: root
    mode: 0755
  become: true
  become_user: root

- name: Install Solr Env to {{ solr_install_dir }}/{{ solr_service_name }}
  become: true
  become_user: "{{ solr_user }}"
  template:
    src: solr.in.sh.j2
    dest: "{{ solr_home }}/bin/solr.in.sh"
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
    mode: 0755
  notify: "Start Solr"

- name: Create ArkCase Solr Cores
  become: true
  become_user: "{{ solr_user }}"
  shell: "{{ solr_bin }} create -c {{ item }} -d {{ solr_home }}/server/solr/configsets/arkcase"
  with_items:
    - "{{ solr_cores }}"