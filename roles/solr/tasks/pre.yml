# Pre-install checks
---
- name: Ensure dependencies are installed.
  package: name={{ item }} state=present
  become: yes
  become_user: root
  with_items:
    - lsof
    - acl
    - sudo

# Ensure Java 1.8+ is present
- name: Ensure Java Installed
  shell: java -version 2>&1 | grep version | awk '{print $3}' | sed 's/"//g'
  register: java_version
  changed_when: False
- assert: { that: "java_version.stdout | version_compare('1.8', '>=')", msg: "Java must be present before being able to install Solr" }

# Uninstall old version of Solr
- debug:
    msg: "{{ item }} => Failed validation? : {{ solr_uninstall_old == true and not(item is undefined or item is none or (item | trim == '')) }}"
  with_items: "{{ uninstall_vars }}"

- fail:
    msg: "Uninstall is requested, but variable '{{ item }}' is not defined or empty"
  when: solr_uninstall_old == true and not(item is undefined or item is none or (item | trim == ''))
  with_items: "{{ uninstall_vars }}"

- fail:
    msg: "Preserve old requested, but versions requested to install and uninstall (new: {{ solr_version }}, old: {{ solr_version_old }}) are the same, change 'solr_preserve_old' to false"
  when: solr_uninstall_old == true and solr_preserve_old == true and (solr_version | version_compare(solr_version_old, '='))

# Validate SSL properties
- debug:
    msg: "{{ item }} => Failed validation? : {{ solr_ssl_enabled == true and not(item is undefined or item is none or (item | trim == '')) }}"
  with_items: "{{ ssl_vars }}"

- fail:
    msg: "SSL is enabled, but variable '{{ item }}' is not defined or empty"
  when: solr_ssl_enabled == true and not(item is undefined or item is none or (item | trim == ''))
  with_items: "{{ ssl_vars }}"

# Validate JMX properties
- debug:
    msg: "{{ item }} => Failed validation? : {{ solr_jmx_enabled == true and not( item is undefined or item is none or (item | trim == '')) }}"
  with_items: "{{ jmx_vars }}"

- fail:
    msg: "JMX is enabled, but variable '{{ item }}' is not defined or empty"
  when: solr_jmx_enabled == true and not(item is undefined or item is none or (item | trim == ''))
  with_items: "{{ jmx_vars }}"

- include_tasks: uninstall.yml
  when: solr_uninstall_old == true

# Ensure no Solr of the same version exists
- name: Check if the version of Solr already exists
  stat:
    path: "{{ solr_install_dir }}/solr-{{ solr_version }}"
  register: solr_path

# Ensure Solr service doesn't exist
- name: Check if Solr {{ solr_version }} service exists
  stat:
    path: "/etc/init.d/{{ solr_service_name }}"
  register: solr_service_path

- debug:
    msg: "Solr {{ solr_version }} is already installed"
  when: (solr_path.stat.exists == True or solr_service_path.stat.exists == True) and solr_install_complete.stat.exists == True

- name: End installation attempt if Solr {{ solr_version }} exists
  meta: end_play
  when: (solr_path.stat.exists == True or solr_service_path.stat.exists == True) and solr_install_complete.stat.exists == True